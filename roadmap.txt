# BitLife Web App Roadmap

## Phase 1: MongoDB Integration

1.  **Set Up MongoDB:**
    *   Install the `mongodb` npm package.
    *   Create a new MongoDB Atlas cluster or set up a local MongoDB instance.
    *   Create a `.env.local` file to store the MongoDB connection string securely.

2.  **Create a Database Utility:**
    *   Create a `lib/mongodb.js` file to handle the database connection.
    *   Implement a function to connect to the database and reuse the connection across the application.

3.  **Define Data Schemas:**
    *   Define a schema for the `Player` character, including attributes like name, age, happiness, health, smarts, and looks.
    *   Define a schema for `GameEvents`, which will store the different events that can occur in the game.
    *   Define a schema for the `GameState` to save and load the player's progress.

4.  **Refactor Application Logic:**
    *   Modify the main game logic in `pages/index.js` to fetch initial data from MongoDB.
    *   Update the application state to interact with the database when events occur.
    *   Implement functions to save the game state to MongoDB periodically or when the user closes the session.

## Phase 2: More Events & Functions

1.  **Expand Event System:**
    *   Create a more sophisticated event engine that can handle conditional events based on the player's age, stats, and past decisions.
    *   Categorize events into different areas of life:
        *   **Childhood:** School, friends, family interactions.
        *   **Career:** Job applications, promotions, workplace scenarios.
        *   **Relationships:** Dating, marriage, children.
        *   **Crime:** Petty crimes, serious offenses, and consequences.
        *   **Health:** Illnesses, accidents, and wellness activities.

2.  **Add New Core Functions:**
    *   **Assets:** Implement a system for buying and selling assets like real estate and vehicles.
    *   **Career Path:** Allow the player to choose a career path and advance in it.
    *   **Relationships:** Add more complex interactions with family, friends, and romantic partners.
    *   **Activities:** Introduce a wider range of activities the player can engage in, such as going to the gym, studying, or taking vacations.

3.  **Enhance the UI:**
    *   Create new UI components to display and manage assets, relationships, and activities.
    *   Improve the layout to accommodate the new features and information.
    *   Add more interactive elements, such as modals and pop-ups, for decision-making.

## Phase 3: Advanced Features

1.  **Generations:**
    *   Implement a system where the player can continue as one of their children after their character dies.
    *   Allow for the passing down of inherited traits and assets.

2.  **Achievements & Scenarios:**
    *   Create a system for achievements to reward players for completing certain life goals.
    *   Introduce special scenarios and challenges with unique outcomes.

3.  **Social Features:**
    *   Add leaderboards to compare players' net worth or achievements.
    *   Allow players to share their life stories on social media.
